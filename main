from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from time import time
import torch
import torch.utils.data as data
from networks.W_net import W_Net_
from framework import MyFrame
from loss import dice_bce_loss
from data import ImageFolder,ImageFolderVessel
import Constants

NAME = 'W-Net-drive-noaug'

def W_Net_Train(retrain=True,pre_trained_path=None):
    solver = MyFrame(W_Net_, dice_bce_loss, 2e-4)
    if not retrain:
        solver.load(pre_trained_path)
    batchsize = 13
    img_path = Constants.img_path
    gt_path = Constants.gt_path

    dataset = ImageFolder(img_path,gt_path)
    data_loader = torch.utils.data.DataLoader(
        dataset,
        batch_size=batchsize,
        shuffle=True,
        num_workers=4)
    tic = time()

    no_optim = 0
    total_epoch = Constants.TOTAL_EPOCH
    train_epoch_best_loss = Constants.INITAL_EPOCH_LOSS
    for epoch in range(1, total_epoch + 1):
        data_loader_iter = iter(data_loader)
        train_epoch_loss = 0
        index = 0
        for img, mask, dist, gt_onet in data_loader_iter:
            #ipdb.set_trace()
            solver.set_input(img_batch=img, mask_batch=mask, dist_batch=dist,gt_onehot=gt_onet)
            train_loss, pred = solver.optimize()
            train_epoch_loss += train_loss
            index = index + 1

        train_epoch_loss = train_epoch_loss/len(data_loader_iter)
        print('----------------------------------------------')
        print('epoch:', epoch, '    time:', int(time() - tic))
        print('train_loss:', train_epoch_loss)
        print('SHAPE:', Constants.Image_size)

        if train_epoch_loss >= train_epoch_best_loss:
            no_optim += 1
        else:
            no_optim = 0
            train_epoch_best_loss = train_epoch_loss
            solver.save('./weights/' + NAME + '.pth')
        if no_optim > Constants.NUM_EARLY_STOP:
            print('early stop at %d epoch' % epoch)
            print('early stop at %d epoch' % epoch)
            break
        if no_optim > Constants.NUM_UPDATE_LR:
            if solver.old_lr < 5e-7:
                break
            solver.load('./weights/' + NAME + '.pth')
            solver.update_lr(2.0, factor=True)

    print('Finish!')



if __name__ == '__main__':
    print(torch.__version__)
    W_Net_Train(True,'./weights/W-Net-cup_0.4-0.4-0.2.pth')
